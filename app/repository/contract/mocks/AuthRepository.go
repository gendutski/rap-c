// Code generated by MockGen. DO NOT EDIT.
// Source: auth-repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	databaseentity "rap-c/app/entity/database-entity"
	payloadentity "rap-c/app/entity/payload-entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthRepository is a mock of AuthRepository interface.
type MockAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepositoryMockRecorder
}

// MockAuthRepositoryMockRecorder is the mock recorder for MockAuthRepository.
type MockAuthRepositoryMockRecorder struct {
	mock *MockAuthRepository
}

// NewMockAuthRepository creates a new mock instance.
func NewMockAuthRepository(ctrl *gomock.Controller) *MockAuthRepository {
	mock := &MockAuthRepository{ctrl: ctrl}
	mock.recorder = &MockAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepository) EXPECT() *MockAuthRepositoryMockRecorder {
	return m.recorder
}

// DoRenewPassword mocks base method.
func (m *MockAuthRepository) DoRenewPassword(ctx context.Context, user *databaseentity.User, payload *payloadentity.RenewPasswordPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoRenewPassword", ctx, user, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoRenewPassword indicates an expected call of DoRenewPassword.
func (mr *MockAuthRepositoryMockRecorder) DoRenewPassword(ctx, user, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoRenewPassword", reflect.TypeOf((*MockAuthRepository)(nil).DoRenewPassword), ctx, user, payload)
}

// DoResetPassword mocks base method.
func (m *MockAuthRepository) DoResetPassword(ctx context.Context, user *databaseentity.User, reset *databaseentity.PasswordResetToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoResetPassword", ctx, user, reset)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoResetPassword indicates an expected call of DoResetPassword.
func (mr *MockAuthRepositoryMockRecorder) DoResetPassword(ctx, user, reset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoResetPassword", reflect.TypeOf((*MockAuthRepository)(nil).DoResetPassword), ctx, user, reset)
}

// DoUserLogin mocks base method.
func (m *MockAuthRepository) DoUserLogin(ctx context.Context, payload *payloadentity.AttemptLoginPayload) (*databaseentity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoUserLogin", ctx, payload)
	ret0, _ := ret[0].(*databaseentity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoUserLogin indicates an expected call of DoUserLogin.
func (mr *MockAuthRepositoryMockRecorder) DoUserLogin(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoUserLogin", reflect.TypeOf((*MockAuthRepository)(nil).DoUserLogin), ctx, payload)
}

// GenerateUserResetPassword mocks base method.
func (m *MockAuthRepository) GenerateUserResetPassword(ctx context.Context, payload *payloadentity.RequestResetPayload) (*databaseentity.PasswordResetToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateUserResetPassword", ctx, payload)
	ret0, _ := ret[0].(*databaseentity.PasswordResetToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateUserResetPassword indicates an expected call of GenerateUserResetPassword.
func (mr *MockAuthRepositoryMockRecorder) GenerateUserResetPassword(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateUserResetPassword", reflect.TypeOf((*MockAuthRepository)(nil).GenerateUserResetPassword), ctx, payload)
}

// GetUserByEmail mocks base method.
func (m *MockAuthRepository) GetUserByEmail(ctx context.Context, email string) (*databaseentity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*databaseentity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockAuthRepositoryMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockAuthRepository)(nil).GetUserByEmail), ctx, email)
}

// ValidateResetToken mocks base method.
func (m *MockAuthRepository) ValidateResetToken(ctx context.Context, payload *payloadentity.ValidateResetTokenPayload) (*databaseentity.PasswordResetToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateResetToken", ctx, payload)
	ret0, _ := ret[0].(*databaseentity.PasswordResetToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateResetToken indicates an expected call of ValidateResetToken.
func (mr *MockAuthRepositoryMockRecorder) ValidateResetToken(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateResetToken", reflect.TypeOf((*MockAuthRepository)(nil).ValidateResetToken), ctx, payload)
}
