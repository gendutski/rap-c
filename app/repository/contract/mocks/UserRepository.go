// Code generated by MockGen. DO NOT EDIT.
// Source: user-repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entity "rap-c/app/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepository) Create(ctx context.Context, user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), ctx, user)
}

// GenerateUserResetPassword mocks base method.
func (m *MockUserRepository) GenerateUserResetPassword(ctx context.Context, email string) (*entity.PasswordResetToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateUserResetPassword", ctx, email)
	ret0, _ := ret[0].(*entity.PasswordResetToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateUserResetPassword indicates an expected call of GenerateUserResetPassword.
func (mr *MockUserRepositoryMockRecorder) GenerateUserResetPassword(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateUserResetPassword", reflect.TypeOf((*MockUserRepository)(nil).GenerateUserResetPassword), ctx, email)
}

// GetTotalUsersByRequest mocks base method.
func (m *MockUserRepository) GetTotalUsersByRequest(ctx context.Context, req *entity.GetUserListRequest) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalUsersByRequest", ctx, req)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalUsersByRequest indicates an expected call of GetTotalUsersByRequest.
func (mr *MockUserRepositoryMockRecorder) GetTotalUsersByRequest(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalUsersByRequest", reflect.TypeOf((*MockUserRepository)(nil).GetTotalUsersByRequest), ctx, req)
}

// GetUserByField mocks base method.
func (m *MockUserRepository) GetUserByField(ctx context.Context, fieldName string, fieldValue interface{}) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByField", ctx, fieldName, fieldValue)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByField indicates an expected call of GetUserByField.
func (mr *MockUserRepositoryMockRecorder) GetUserByField(ctx, fieldName, fieldValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByField", reflect.TypeOf((*MockUserRepository)(nil).GetUserByField), ctx, fieldName, fieldValue)
}

// GetUsersByRequest mocks base method.
func (m *MockUserRepository) GetUsersByRequest(ctx context.Context, req *entity.GetUserListRequest) ([]*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByRequest", ctx, req)
	ret0, _ := ret[0].([]*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByRequest indicates an expected call of GetUsersByRequest.
func (mr *MockUserRepositoryMockRecorder) GetUsersByRequest(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByRequest", reflect.TypeOf((*MockUserRepository)(nil).GetUsersByRequest), ctx, req)
}

// Update mocks base method.
func (m *MockUserRepository) Update(ctx context.Context, user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryMockRecorder) Update(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepository)(nil).Update), ctx, user)
}

// ValidateResetToken mocks base method.
func (m *MockUserRepository) ValidateResetToken(ctx context.Context, email, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateResetToken", ctx, email, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateResetToken indicates an expected call of ValidateResetToken.
func (mr *MockUserRepositoryMockRecorder) ValidateResetToken(ctx, email, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateResetToken", reflect.TypeOf((*MockUserRepository)(nil).ValidateResetToken), ctx, email, token)
}
