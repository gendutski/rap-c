// Code generated by MockGen. DO NOT EDIT.
// Source: unit-repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	databaseentity "rap-c/app/entity/database-entity"
	payloadentity "rap-c/app/entity/payload-entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUnitRepository is a mock of UnitRepository interface.
type MockUnitRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUnitRepositoryMockRecorder
}

// MockUnitRepositoryMockRecorder is the mock recorder for MockUnitRepository.
type MockUnitRepositoryMockRecorder struct {
	mock *MockUnitRepository
}

// NewMockUnitRepository creates a new mock instance.
func NewMockUnitRepository(ctrl *gomock.Controller) *MockUnitRepository {
	mock := &MockUnitRepository{ctrl: ctrl}
	mock.recorder = &MockUnitRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnitRepository) EXPECT() *MockUnitRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUnitRepository) Create(ctx context.Context, unit *databaseentity.Unit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, unit)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUnitRepositoryMockRecorder) Create(ctx, unit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUnitRepository)(nil).Create), ctx, unit)
}

// Delete mocks base method.
func (m *MockUnitRepository) Delete(ctx context.Context, unit *databaseentity.Unit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, unit)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUnitRepositoryMockRecorder) Delete(ctx, unit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUnitRepository)(nil).Delete), ctx, unit)
}

// GetTotalUnitsByRequest mocks base method.
func (m *MockUnitRepository) GetTotalUnitsByRequest(ctx context.Context, req *payloadentity.GetUnitListRequest) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalUnitsByRequest", ctx, req)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalUnitsByRequest indicates an expected call of GetTotalUnitsByRequest.
func (mr *MockUnitRepositoryMockRecorder) GetTotalUnitsByRequest(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalUnitsByRequest", reflect.TypeOf((*MockUnitRepository)(nil).GetTotalUnitsByRequest), ctx, req)
}

// GetUnitByName mocks base method.
func (m *MockUnitRepository) GetUnitByName(ctx context.Context, name string) (*databaseentity.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitByName", ctx, name)
	ret0, _ := ret[0].(*databaseentity.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitByName indicates an expected call of GetUnitByName.
func (mr *MockUnitRepositoryMockRecorder) GetUnitByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitByName", reflect.TypeOf((*MockUnitRepository)(nil).GetUnitByName), ctx, name)
}

// GetUnitsByRequest mocks base method.
func (m *MockUnitRepository) GetUnitsByRequest(ctx context.Context, req *payloadentity.GetUnitListRequest) ([]*databaseentity.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitsByRequest", ctx, req)
	ret0, _ := ret[0].([]*databaseentity.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitsByRequest indicates an expected call of GetUnitsByRequest.
func (mr *MockUnitRepositoryMockRecorder) GetUnitsByRequest(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitsByRequest", reflect.TypeOf((*MockUnitRepository)(nil).GetUnitsByRequest), ctx, req)
}
